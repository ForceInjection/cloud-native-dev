apiVersion: apps/v1
kind: Deployment
metadata:
  name: readiness-with-troublemaker
  labels:
    app: readiness-with-troublemaker
    
spec:
  selector:
    matchLabels:
      app: readiness-with-troublemaker
  template:
    metadata:
      labels:
        app: readiness-with-troublemaker
    spec:
      containers:
      - name: troublemaker 
        image: k8s-probes-demo:2024
        imagePullPolicy: Always

        # Notes: 
        # * ENTRYPOINT in Docker = 'command' in k8s
        # * CMD in Docker = 'args' in k8s 
        # * If you provide "command", then you also need to provide "args".
        #     For some reason the CMD defined in the container image is ignored,
        #     when k8s "command" is specified.
        command: ["/home/troublemaker.sh"]
        args: ["nginx", "-g", "daemon off;"]

        env:
        # Double quotes for values of ENV variables are important.
        - name: ROLE
          #value: "NORMAL"
          value: "TROUBLEMAKER"

        volumeMounts:
        - name: shared-directory
          mountPath: /shared
        
        ports:
        - name: alt-http
          containerPort: 8888

        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 5m
            memory: 20Mi
          
      - name: readiness-with-troublemaker # Name of container in the pod.
        image: k8s-probes-demo:2024
        imagePullPolicy: Always

        env:
        - name: START_DELAY
          value: "20" # Double quotes for ENV variables are important.

        ports:
        - name: http 
          containerPort: 80

        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 5m
            memory: 20Mi

        # Readiness probes help Kubernetes know when to start sending traffic to the pod.
        #   This probe helps kubernetes to "add" or "remove" this pod from the service in front of it.
        #   So, when the probe passes it is added to the service,
        #       when it fails at any time in it's life, kubernetes removes it from the service.
        # Restarting the "stuck" container is the job of livenessProbe, explained further down.
        # Note: Readiness probe runs throughout the life of the container - every "periodSeconds",
        #       not just at the container start time!
        #
        # The WITPASS/wordpress images takes long to start, 
        #   because themes and plugins are pulled at container start time.
        # 
        readinessProbe:
          httpGet:
            path: /readinesscheck.txt
            port: 80
          initialDelaySeconds: 5

          # Retry the probe every X seconds (frequency):
          periodSeconds: 5

          # Number of times this probe can fail ,
          #   before kubernetes gives up and marks the "pod" as "Unready":
          failureThreshold: 24

          # In the case above, the Pod will be marked "Unready",
          #   if the probe does not pass 5 x 24 = 120 seconds.
          successThreshold: 1
        
        volumeMounts:
        - name: shared-directory
          mountPath: /usr/share/nginx/html

      volumes:
      - name: shared-directory
        emptyDir: {}
